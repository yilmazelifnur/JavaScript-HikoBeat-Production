{"ast":null,"code":"/**\n *  Add details about signing here.\n *\n *  @_subsection: api/crypto:Signing  [about-signing]\n */\nimport * as secp256k1 from \"@noble/secp256k1\";\nimport { concat, dataLength, getBytes, getBytesCopy, hexlify, toBeHex, assertArgument } from \"../utils/index.js\";\nimport { computeHmac } from \"./hmac.js\";\nimport { Signature } from \"./signature.js\";\n//const N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// Make noble-secp256k1 sync\nsecp256k1.utils.hmacSha256Sync = function (key, ...messages) {\n  return getBytes(computeHmac(\"sha256\", key, concat(messages)));\n};\n/**\n *  A **SigningKey** provides high-level access to the elliptic curve\n *  cryptography (ECC) operations and key management.\n */\nexport class SigningKey {\n  #privateKey;\n  /**\n   *  Creates a new **SigningKey** for %%privateKey%%.\n   */\n  constructor(privateKey) {\n    assertArgument(dataLength(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n    this.#privateKey = hexlify(privateKey);\n  }\n  /**\n   *  The private key.\n   */\n  get privateKey() {\n    return this.#privateKey;\n  }\n  /**\n   *  The uncompressed public key.\n   *\n   * This will always begin with the prefix ``0x04`` and be 132\n   * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n   */\n  get publicKey() {\n    return SigningKey.computePublicKey(this.#privateKey);\n  }\n  /**\n   *  The compressed public key.\n   *\n   *  This will always begin with either the prefix ``0x02`` or ``0x03``\n   *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n   *  nibbles)\n   */\n  get compressedPublicKey() {\n    return SigningKey.computePublicKey(this.#privateKey, true);\n  }\n  /**\n   *  Return the signature of the signed %%digest%%.\n   */\n  sign(digest) {\n    assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n    const [sigDer, recid] = secp256k1.signSync(getBytesCopy(digest), getBytesCopy(this.#privateKey), {\n      recovered: true,\n      canonical: true\n    });\n    const sig = secp256k1.Signature.fromHex(sigDer);\n    return Signature.from({\n      r: toBeHex(\"0x\" + sig.r.toString(16), 32),\n      s: toBeHex(\"0x\" + sig.s.toString(16), 32),\n      v: recid ? 0x1c : 0x1b\n    });\n  }\n  /**\n   *  Returns the [[link-wiki-ecdh]] shared secret between this\n   *  private key and the %%other%% key.\n   *\n   *  The %%other%% key may be any type of key, a raw public key,\n   *  a compressed/uncompressed pubic key or aprivate key.\n   *\n   *  Best practice is usually to use a cryptographic hash on the\n   *  returned value before using it as a symetric secret.\n   *\n   *  @example:\n   *    sign1 = new SigningKey(id(\"some-secret-1\"))\n   *    sign2 = new SigningKey(id(\"some-secret-2\"))\n   *\n   *    // Notice that privA.computeSharedSecret(pubB)...\n   *    sign1.computeSharedSecret(sign2.publicKey)\n   *    //_result:\n   *\n   *    // ...is equal to privB.computeSharedSecret(pubA).\n   *    sign2.computeSharedSecret(sign1.publicKey)\n   *    //_result:\n   */\n  computeSharedSecret(other) {\n    const pubKey = SigningKey.computePublicKey(other);\n    return hexlify(secp256k1.getSharedSecret(getBytesCopy(this.#privateKey), getBytes(pubKey)));\n  }\n  /**\n   *  Compute the public key for %%key%%, optionally %%compressed%%.\n   *\n   *  The %%key%% may be any type of key, a raw public key, a\n   *  compressed/uncompressed public key or private key.\n   *\n   *  @example:\n   *    sign = new SigningKey(id(\"some-secret\"));\n   *\n   *    // Compute the uncompressed public key for a private key\n   *    SigningKey.computePublicKey(sign.privateKey)\n   *    //_result:\n   *\n   *    // Compute the compressed public key for a private key\n   *    SigningKey.computePublicKey(sign.privateKey, true)\n   *    //_result:\n   *\n   *    // Compute the uncompressed public key\n   *    SigningKey.computePublicKey(sign.publicKey, false);\n   *    //_result:\n   *\n   *    // Compute the Compressed a public key\n   *    SigningKey.computePublicKey(sign.publicKey, true);\n   *    //_result:\n   */\n  static computePublicKey(key, compressed) {\n    let bytes = getBytes(key, \"key\");\n    // private key\n    if (bytes.length === 32) {\n      const pubKey = secp256k1.getPublicKey(bytes, !!compressed);\n      return hexlify(pubKey);\n    }\n    // raw public key; use uncompressed key with 0x04 prefix\n    if (bytes.length === 64) {\n      const pub = new Uint8Array(65);\n      pub[0] = 0x04;\n      pub.set(bytes, 1);\n      bytes = pub;\n    }\n    const point = secp256k1.Point.fromHex(bytes);\n    return hexlify(point.toRawBytes(compressed));\n  }\n  /**\n   *  Returns the public key for the private key which produced the\n   *  %%signature%% for the given %%digest%%.\n   *\n   *  @example:\n   *    key = new SigningKey(id(\"some-secret\"))\n   *    digest = id(\"hello world\")\n   *    sig = key.sign(digest)\n   *\n   *    // Notice the signer public key...\n   *    key.publicKey\n   *    //_result:\n   *\n   *    // ...is equal to the recovered public key\n   *    SigningKey.recoverPublicKey(digest, sig)\n   *    //_result:\n   *\n   */\n  static recoverPublicKey(digest, signature) {\n    assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n    const sig = Signature.from(signature);\n    const der = secp256k1.Signature.fromCompact(getBytesCopy(concat([sig.r, sig.s]))).toDERRawBytes();\n    const pubKey = secp256k1.recoverPublicKey(getBytesCopy(digest), der, sig.yParity);\n    assertArgument(pubKey != null, \"invalid signature for digest\", \"signature\", signature);\n    return hexlify(pubKey);\n  }\n  /**\n   *  Returns the point resulting from adding the ellipic curve points\n   *  %%p0%% and %%p1%%.\n   *\n   *  This is not a common function most developers should require, but\n   *  can be useful for certain privacy-specific techniques.\n   *\n   *  For example, it is used by [[HDNodeWallet]] to compute child\n   *  addresses from parent public keys and chain codes.\n   */\n  static addPoints(p0, p1, compressed) {\n    const pub0 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p0).substring(2));\n    const pub1 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p1).substring(2));\n    return \"0x\" + pub0.add(pub1).toHex(!!compressed);\n  }\n}","map":{"version":3,"names":["secp256k1","concat","dataLength","getBytes","getBytesCopy","hexlify","toBeHex","assertArgument","computeHmac","Signature","utils","hmacSha256Sync","key","messages","SigningKey","privateKey","constructor","publicKey","computePublicKey","compressedPublicKey","sign","digest","sigDer","recid","signSync","recovered","canonical","sig","fromHex","from","r","toString","s","v","computeSharedSecret","other","pubKey","getSharedSecret","compressed","bytes","length","getPublicKey","pub","Uint8Array","set","point","Point","toRawBytes","recoverPublicKey","signature","der","fromCompact","toDERRawBytes","yParity","addPoints","p0","p1","pub0","substring","pub1","add","toHex"],"sources":["C:/Users/hikme/OneDrive/Masaüstü/metamask-connection/metamask-connection/node_modules/ethers/lib.esm/crypto/signing-key.js"],"sourcesContent":["/**\n *  Add details about signing here.\n *\n *  @_subsection: api/crypto:Signing  [about-signing]\n */\nimport * as secp256k1 from \"@noble/secp256k1\";\nimport { concat, dataLength, getBytes, getBytesCopy, hexlify, toBeHex, assertArgument } from \"../utils/index.js\";\nimport { computeHmac } from \"./hmac.js\";\nimport { Signature } from \"./signature.js\";\n//const N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// Make noble-secp256k1 sync\nsecp256k1.utils.hmacSha256Sync = function (key, ...messages) {\n    return getBytes(computeHmac(\"sha256\", key, concat(messages)));\n};\n/**\n *  A **SigningKey** provides high-level access to the elliptic curve\n *  cryptography (ECC) operations and key management.\n */\nexport class SigningKey {\n    #privateKey;\n    /**\n     *  Creates a new **SigningKey** for %%privateKey%%.\n     */\n    constructor(privateKey) {\n        assertArgument(dataLength(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n        this.#privateKey = hexlify(privateKey);\n    }\n    /**\n     *  The private key.\n     */\n    get privateKey() { return this.#privateKey; }\n    /**\n     *  The uncompressed public key.\n     *\n     * This will always begin with the prefix ``0x04`` and be 132\n     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n     */\n    get publicKey() { return SigningKey.computePublicKey(this.#privateKey); }\n    /**\n     *  The compressed public key.\n     *\n     *  This will always begin with either the prefix ``0x02`` or ``0x03``\n     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n     *  nibbles)\n     */\n    get compressedPublicKey() { return SigningKey.computePublicKey(this.#privateKey, true); }\n    /**\n     *  Return the signature of the signed %%digest%%.\n     */\n    sign(digest) {\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n        const [sigDer, recid] = secp256k1.signSync(getBytesCopy(digest), getBytesCopy(this.#privateKey), {\n            recovered: true,\n            canonical: true\n        });\n        const sig = secp256k1.Signature.fromHex(sigDer);\n        return Signature.from({\n            r: toBeHex(\"0x\" + sig.r.toString(16), 32),\n            s: toBeHex(\"0x\" + sig.s.toString(16), 32),\n            v: (recid ? 0x1c : 0x1b)\n        });\n    }\n    /**\n     *  Returns the [[link-wiki-ecdh]] shared secret between this\n     *  private key and the %%other%% key.\n     *\n     *  The %%other%% key may be any type of key, a raw public key,\n     *  a compressed/uncompressed pubic key or aprivate key.\n     *\n     *  Best practice is usually to use a cryptographic hash on the\n     *  returned value before using it as a symetric secret.\n     *\n     *  @example:\n     *    sign1 = new SigningKey(id(\"some-secret-1\"))\n     *    sign2 = new SigningKey(id(\"some-secret-2\"))\n     *\n     *    // Notice that privA.computeSharedSecret(pubB)...\n     *    sign1.computeSharedSecret(sign2.publicKey)\n     *    //_result:\n     *\n     *    // ...is equal to privB.computeSharedSecret(pubA).\n     *    sign2.computeSharedSecret(sign1.publicKey)\n     *    //_result:\n     */\n    computeSharedSecret(other) {\n        const pubKey = SigningKey.computePublicKey(other);\n        return hexlify(secp256k1.getSharedSecret(getBytesCopy(this.#privateKey), getBytes(pubKey)));\n    }\n    /**\n     *  Compute the public key for %%key%%, optionally %%compressed%%.\n     *\n     *  The %%key%% may be any type of key, a raw public key, a\n     *  compressed/uncompressed public key or private key.\n     *\n     *  @example:\n     *    sign = new SigningKey(id(\"some-secret\"));\n     *\n     *    // Compute the uncompressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey)\n     *    //_result:\n     *\n     *    // Compute the compressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey, true)\n     *    //_result:\n     *\n     *    // Compute the uncompressed public key\n     *    SigningKey.computePublicKey(sign.publicKey, false);\n     *    //_result:\n     *\n     *    // Compute the Compressed a public key\n     *    SigningKey.computePublicKey(sign.publicKey, true);\n     *    //_result:\n     */\n    static computePublicKey(key, compressed) {\n        let bytes = getBytes(key, \"key\");\n        // private key\n        if (bytes.length === 32) {\n            const pubKey = secp256k1.getPublicKey(bytes, !!compressed);\n            return hexlify(pubKey);\n        }\n        // raw public key; use uncompressed key with 0x04 prefix\n        if (bytes.length === 64) {\n            const pub = new Uint8Array(65);\n            pub[0] = 0x04;\n            pub.set(bytes, 1);\n            bytes = pub;\n        }\n        const point = secp256k1.Point.fromHex(bytes);\n        return hexlify(point.toRawBytes(compressed));\n    }\n    /**\n     *  Returns the public key for the private key which produced the\n     *  %%signature%% for the given %%digest%%.\n     *\n     *  @example:\n     *    key = new SigningKey(id(\"some-secret\"))\n     *    digest = id(\"hello world\")\n     *    sig = key.sign(digest)\n     *\n     *    // Notice the signer public key...\n     *    key.publicKey\n     *    //_result:\n     *\n     *    // ...is equal to the recovered public key\n     *    SigningKey.recoverPublicKey(digest, sig)\n     *    //_result:\n     *\n     */\n    static recoverPublicKey(digest, signature) {\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n        const sig = Signature.from(signature);\n        const der = secp256k1.Signature.fromCompact(getBytesCopy(concat([sig.r, sig.s]))).toDERRawBytes();\n        const pubKey = secp256k1.recoverPublicKey(getBytesCopy(digest), der, sig.yParity);\n        assertArgument(pubKey != null, \"invalid signature for digest\", \"signature\", signature);\n        return hexlify(pubKey);\n    }\n    /**\n     *  Returns the point resulting from adding the ellipic curve points\n     *  %%p0%% and %%p1%%.\n     *\n     *  This is not a common function most developers should require, but\n     *  can be useful for certain privacy-specific techniques.\n     *\n     *  For example, it is used by [[HDNodeWallet]] to compute child\n     *  addresses from parent public keys and chain codes.\n     */\n    static addPoints(p0, p1, compressed) {\n        const pub0 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p0).substring(2));\n        const pub1 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p1).substring(2));\n        return \"0x\" + pub0.add(pub1).toHex(!!compressed);\n    }\n}\n//# sourceMappingURL=signing-key.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}