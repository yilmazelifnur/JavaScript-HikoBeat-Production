{"ast":null,"code":"/**\n *  A fundamental building block of Ethereum is the underlying\n *  cryptographic primitives.\n *\n *  @_section: api/crypto:Cryptographic Functions   [about-crypto]\n */\nnull;\n// We import all these so we can export lock()\nimport { computeHmac } from \"./hmac.js\";\nimport { keccak256 } from \"./keccak.js\";\nimport { ripemd160 } from \"./ripemd160.js\";\nimport { pbkdf2 } from \"./pbkdf2.js\";\nimport { randomBytes } from \"./random.js\";\nimport { scrypt, scryptSync } from \"./scrypt.js\";\nimport { sha256, sha512 } from \"./sha2.js\";\nexport { computeHmac, randomBytes, keccak256, ripemd160, sha256, sha512, pbkdf2, scrypt, scryptSync };\nexport { SigningKey } from \"./signing-key.js\";\nexport { Signature } from \"./signature.js\";\n/**\n *  Once called, prevents any future change to the underlying cryptographic\n *  primitives using the ``.register`` feature for hooks.\n */\nfunction lock() {\n  computeHmac.lock();\n  keccak256.lock();\n  pbkdf2.lock();\n  randomBytes.lock();\n  ripemd160.lock();\n  scrypt.lock();\n  scryptSync.lock();\n  sha256.lock();\n  sha512.lock();\n  randomBytes.lock();\n}\nexport { lock };","map":{"version":3,"names":["computeHmac","keccak256","ripemd160","pbkdf2","randomBytes","scrypt","scryptSync","sha256","sha512","SigningKey","Signature","lock"],"sources":["C:/Users/hikme/OneDrive/Masaüstü/metamask-connection/metamask-connection/node_modules/ethers/lib.esm/crypto/index.js"],"sourcesContent":["/**\n *  A fundamental building block of Ethereum is the underlying\n *  cryptographic primitives.\n *\n *  @_section: api/crypto:Cryptographic Functions   [about-crypto]\n */\nnull;\n// We import all these so we can export lock()\nimport { computeHmac } from \"./hmac.js\";\nimport { keccak256 } from \"./keccak.js\";\nimport { ripemd160 } from \"./ripemd160.js\";\nimport { pbkdf2 } from \"./pbkdf2.js\";\nimport { randomBytes } from \"./random.js\";\nimport { scrypt, scryptSync } from \"./scrypt.js\";\nimport { sha256, sha512 } from \"./sha2.js\";\nexport { computeHmac, randomBytes, keccak256, ripemd160, sha256, sha512, pbkdf2, scrypt, scryptSync };\nexport { SigningKey } from \"./signing-key.js\";\nexport { Signature } from \"./signature.js\";\n/**\n *  Once called, prevents any future change to the underlying cryptographic\n *  primitives using the ``.register`` feature for hooks.\n */\nfunction lock() {\n    computeHmac.lock();\n    keccak256.lock();\n    pbkdf2.lock();\n    randomBytes.lock();\n    ripemd160.lock();\n    scrypt.lock();\n    scryptSync.lock();\n    sha256.lock();\n    sha512.lock();\n    randomBytes.lock();\n}\nexport { lock };\n//# sourceMappingURL=index.js.map"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,SAASA,WAAW,QAAQ,WAAW;AACvC,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,MAAM,EAAEC,UAAU,QAAQ,aAAa;AAChD,SAASC,MAAM,EAAEC,MAAM,QAAQ,WAAW;AAC1C,SAASR,WAAW,EAAEI,WAAW,EAAEH,SAAS,EAAEC,SAAS,EAAEK,MAAM,EAAEC,MAAM,EAAEL,MAAM,EAAEE,MAAM,EAAEC,UAAU;AACnG,SAASG,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,SAAS,QAAQ,gBAAgB;AAC1C;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAAA,EAAG;EACZX,WAAW,CAACW,IAAI,CAAC,CAAC;EAClBV,SAAS,CAACU,IAAI,CAAC,CAAC;EAChBR,MAAM,CAACQ,IAAI,CAAC,CAAC;EACbP,WAAW,CAACO,IAAI,CAAC,CAAC;EAClBT,SAAS,CAACS,IAAI,CAAC,CAAC;EAChBN,MAAM,CAACM,IAAI,CAAC,CAAC;EACbL,UAAU,CAACK,IAAI,CAAC,CAAC;EACjBJ,MAAM,CAACI,IAAI,CAAC,CAAC;EACbH,MAAM,CAACG,IAAI,CAAC,CAAC;EACbP,WAAW,CAACO,IAAI,CAAC,CAAC;AACtB;AACA,SAASA,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}