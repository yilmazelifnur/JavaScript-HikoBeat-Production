{"ast":null,"code":"/**\n *  A Typed object allows a value to have its type explicitly\n *  specified.\n *\n *  For example, in Solidity, the value ``45`` could represent a\n *  ``uint8`` or a ``uint256``. The value ``0x1234`` could represent\n *  a ``bytes2`` or ``bytes``.\n *\n *  Since JavaScript has no meaningful way to explicitly inform any\n *  APIs which what the type is, this allows transparent interoperation\n *  with Soldity.\n *\n *  @_subsection: api/abi:Typed Values\n */\nimport { assertPrivate, defineProperties } from \"../utils/index.js\";\nconst _gaurd = {};\nfunction n(value, width) {\n  let signed = false;\n  if (width < 0) {\n    signed = true;\n    width *= -1;\n  }\n  // @TODO: Check range is valid for value\n  return new Typed(_gaurd, `${signed ? \"\" : \"u\"}int${width}`, value, {\n    signed,\n    width\n  });\n}\nfunction b(value, size) {\n  // @TODO: Check range is valid for value\n  return new Typed(_gaurd, `bytes${size ? size : \"\"}`, value, {\n    size\n  });\n}\nconst _typedSymbol = Symbol.for(\"_ethers_typed\");\n/**\n *  The **Typed** class to wrap values providing explicit type information.\n */\nexport class Typed {\n  /**\n   *  The type, as a Solidity-compatible type.\n   */\n  type;\n  /**\n   *  The actual value.\n   */\n  value;\n  #options;\n  /**\n   *  @_ignore:\n   */\n  _typedSymbol;\n  /**\n   *  @_ignore:\n   */\n  constructor(gaurd, type, value, options) {\n    if (options == null) {\n      options = null;\n    }\n    assertPrivate(_gaurd, gaurd, \"Typed\");\n    defineProperties(this, {\n      _typedSymbol,\n      type,\n      value\n    });\n    this.#options = options;\n    // Check the value is valid\n    this.format();\n  }\n  /**\n   *  Format the type as a Human-Readable type.\n   */\n  format() {\n    if (this.type === \"array\") {\n      throw new Error(\"\");\n    } else if (this.type === \"dynamicArray\") {\n      throw new Error(\"\");\n    } else if (this.type === \"tuple\") {\n      return `tuple(${this.value.map(v => v.format()).join(\",\")})`;\n    }\n    return this.type;\n  }\n  /**\n   *  The default value returned by this type.\n   */\n  defaultValue() {\n    return 0;\n  }\n  /**\n   *  The minimum value for numeric types.\n   */\n  minValue() {\n    return 0;\n  }\n  /**\n   *  The maximum value for numeric types.\n   */\n  maxValue() {\n    return 0;\n  }\n  /**\n   *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].\n   */\n  isBigInt() {\n    return !!this.type.match(/^u?int[0-9]+$/);\n  }\n  /**\n   *  Returns ``true`` and provides a type guard is this is a [[TypedData]].\n   */\n  isData() {\n    return this.type.startsWith(\"bytes\");\n  }\n  /**\n   *  Returns ``true`` and provides a type guard is this is a [[TypedString]].\n   */\n  isString() {\n    return this.type === \"string\";\n  }\n  /**\n   *  Returns the tuple name, if this is a tuple. Throws otherwise.\n   */\n  get tupleName() {\n    if (this.type !== \"tuple\") {\n      throw TypeError(\"not a tuple\");\n    }\n    return this.#options;\n  }\n  // Returns the length of this type as an array\n  // - `null` indicates the length is unforced, it could be dynamic\n  // - `-1` indicates the length is dynamic\n  // - any other value indicates it is a static array and is its length\n  /**\n   *  Returns the length of the array type or ``-1`` if it is dynamic.\n   *\n   *  Throws if the type is not an array.\n   */\n  get arrayLength() {\n    if (this.type !== \"array\") {\n      throw TypeError(\"not an array\");\n    }\n    if (this.#options === true) {\n      return -1;\n    }\n    if (this.#options === false) {\n      return this.value.length;\n    }\n    return null;\n  }\n  /**\n   *  Returns a new **Typed** of %%type%% with the %%value%%.\n   */\n  static from(type, value) {\n    return new Typed(_gaurd, type, value);\n  }\n  /**\n   *  Return a new ``uint8`` type for %%v%%.\n   */\n  static uint8(v) {\n    return n(v, 8);\n  }\n  /**\n   *  Return a new ``uint16`` type for %%v%%.\n   */\n  static uint16(v) {\n    return n(v, 16);\n  }\n  /**\n   *  Return a new ``uint24`` type for %%v%%.\n   */\n  static uint24(v) {\n    return n(v, 24);\n  }\n  /**\n   *  Return a new ``uint32`` type for %%v%%.\n   */\n  static uint32(v) {\n    return n(v, 32);\n  }\n  /**\n   *  Return a new ``uint40`` type for %%v%%.\n   */\n  static uint40(v) {\n    return n(v, 40);\n  }\n  /**\n   *  Return a new ``uint48`` type for %%v%%.\n   */\n  static uint48(v) {\n    return n(v, 48);\n  }\n  /**\n   *  Return a new ``uint56`` type for %%v%%.\n   */\n  static uint56(v) {\n    return n(v, 56);\n  }\n  /**\n   *  Return a new ``uint64`` type for %%v%%.\n   */\n  static uint64(v) {\n    return n(v, 64);\n  }\n  /**\n   *  Return a new ``uint72`` type for %%v%%.\n   */\n  static uint72(v) {\n    return n(v, 72);\n  }\n  /**\n   *  Return a new ``uint80`` type for %%v%%.\n   */\n  static uint80(v) {\n    return n(v, 80);\n  }\n  /**\n   *  Return a new ``uint88`` type for %%v%%.\n   */\n  static uint88(v) {\n    return n(v, 88);\n  }\n  /**\n   *  Return a new ``uint96`` type for %%v%%.\n   */\n  static uint96(v) {\n    return n(v, 96);\n  }\n  /**\n   *  Return a new ``uint104`` type for %%v%%.\n   */\n  static uint104(v) {\n    return n(v, 104);\n  }\n  /**\n   *  Return a new ``uint112`` type for %%v%%.\n   */\n  static uint112(v) {\n    return n(v, 112);\n  }\n  /**\n   *  Return a new ``uint120`` type for %%v%%.\n   */\n  static uint120(v) {\n    return n(v, 120);\n  }\n  /**\n   *  Return a new ``uint128`` type for %%v%%.\n   */\n  static uint128(v) {\n    return n(v, 128);\n  }\n  /**\n   *  Return a new ``uint136`` type for %%v%%.\n   */\n  static uint136(v) {\n    return n(v, 136);\n  }\n  /**\n   *  Return a new ``uint144`` type for %%v%%.\n   */\n  static uint144(v) {\n    return n(v, 144);\n  }\n  /**\n   *  Return a new ``uint152`` type for %%v%%.\n   */\n  static uint152(v) {\n    return n(v, 152);\n  }\n  /**\n   *  Return a new ``uint160`` type for %%v%%.\n   */\n  static uint160(v) {\n    return n(v, 160);\n  }\n  /**\n   *  Return a new ``uint168`` type for %%v%%.\n   */\n  static uint168(v) {\n    return n(v, 168);\n  }\n  /**\n   *  Return a new ``uint176`` type for %%v%%.\n   */\n  static uint176(v) {\n    return n(v, 176);\n  }\n  /**\n   *  Return a new ``uint184`` type for %%v%%.\n   */\n  static uint184(v) {\n    return n(v, 184);\n  }\n  /**\n   *  Return a new ``uint192`` type for %%v%%.\n   */\n  static uint192(v) {\n    return n(v, 192);\n  }\n  /**\n   *  Return a new ``uint200`` type for %%v%%.\n   */\n  static uint200(v) {\n    return n(v, 200);\n  }\n  /**\n   *  Return a new ``uint208`` type for %%v%%.\n   */\n  static uint208(v) {\n    return n(v, 208);\n  }\n  /**\n   *  Return a new ``uint216`` type for %%v%%.\n   */\n  static uint216(v) {\n    return n(v, 216);\n  }\n  /**\n   *  Return a new ``uint224`` type for %%v%%.\n   */\n  static uint224(v) {\n    return n(v, 224);\n  }\n  /**\n   *  Return a new ``uint232`` type for %%v%%.\n   */\n  static uint232(v) {\n    return n(v, 232);\n  }\n  /**\n   *  Return a new ``uint240`` type for %%v%%.\n   */\n  static uint240(v) {\n    return n(v, 240);\n  }\n  /**\n   *  Return a new ``uint248`` type for %%v%%.\n   */\n  static uint248(v) {\n    return n(v, 248);\n  }\n  /**\n   *  Return a new ``uint256`` type for %%v%%.\n   */\n  static uint256(v) {\n    return n(v, 256);\n  }\n  /**\n   *  Return a new ``uint256`` type for %%v%%.\n   */\n  static uint(v) {\n    return n(v, 256);\n  }\n  /**\n   *  Return a new ``int8`` type for %%v%%.\n   */\n  static int8(v) {\n    return n(v, -8);\n  }\n  /**\n   *  Return a new ``int16`` type for %%v%%.\n   */\n  static int16(v) {\n    return n(v, -16);\n  }\n  /**\n   *  Return a new ``int24`` type for %%v%%.\n   */\n  static int24(v) {\n    return n(v, -24);\n  }\n  /**\n   *  Return a new ``int32`` type for %%v%%.\n   */\n  static int32(v) {\n    return n(v, -32);\n  }\n  /**\n   *  Return a new ``int40`` type for %%v%%.\n   */\n  static int40(v) {\n    return n(v, -40);\n  }\n  /**\n   *  Return a new ``int48`` type for %%v%%.\n   */\n  static int48(v) {\n    return n(v, -48);\n  }\n  /**\n   *  Return a new ``int56`` type for %%v%%.\n   */\n  static int56(v) {\n    return n(v, -56);\n  }\n  /**\n   *  Return a new ``int64`` type for %%v%%.\n   */\n  static int64(v) {\n    return n(v, -64);\n  }\n  /**\n   *  Return a new ``int72`` type for %%v%%.\n   */\n  static int72(v) {\n    return n(v, -72);\n  }\n  /**\n   *  Return a new ``int80`` type for %%v%%.\n   */\n  static int80(v) {\n    return n(v, -80);\n  }\n  /**\n   *  Return a new ``int88`` type for %%v%%.\n   */\n  static int88(v) {\n    return n(v, -88);\n  }\n  /**\n   *  Return a new ``int96`` type for %%v%%.\n   */\n  static int96(v) {\n    return n(v, -96);\n  }\n  /**\n   *  Return a new ``int104`` type for %%v%%.\n   */\n  static int104(v) {\n    return n(v, -104);\n  }\n  /**\n   *  Return a new ``int112`` type for %%v%%.\n   */\n  static int112(v) {\n    return n(v, -112);\n  }\n  /**\n   *  Return a new ``int120`` type for %%v%%.\n   */\n  static int120(v) {\n    return n(v, -120);\n  }\n  /**\n   *  Return a new ``int128`` type for %%v%%.\n   */\n  static int128(v) {\n    return n(v, -128);\n  }\n  /**\n   *  Return a new ``int136`` type for %%v%%.\n   */\n  static int136(v) {\n    return n(v, -136);\n  }\n  /**\n   *  Return a new ``int144`` type for %%v%%.\n   */\n  static int144(v) {\n    return n(v, -144);\n  }\n  /**\n   *  Return a new ``int52`` type for %%v%%.\n   */\n  static int152(v) {\n    return n(v, -152);\n  }\n  /**\n   *  Return a new ``int160`` type for %%v%%.\n   */\n  static int160(v) {\n    return n(v, -160);\n  }\n  /**\n   *  Return a new ``int168`` type for %%v%%.\n   */\n  static int168(v) {\n    return n(v, -168);\n  }\n  /**\n   *  Return a new ``int176`` type for %%v%%.\n   */\n  static int176(v) {\n    return n(v, -176);\n  }\n  /**\n   *  Return a new ``int184`` type for %%v%%.\n   */\n  static int184(v) {\n    return n(v, -184);\n  }\n  /**\n   *  Return a new ``int92`` type for %%v%%.\n   */\n  static int192(v) {\n    return n(v, -192);\n  }\n  /**\n   *  Return a new ``int200`` type for %%v%%.\n   */\n  static int200(v) {\n    return n(v, -200);\n  }\n  /**\n   *  Return a new ``int208`` type for %%v%%.\n   */\n  static int208(v) {\n    return n(v, -208);\n  }\n  /**\n   *  Return a new ``int216`` type for %%v%%.\n   */\n  static int216(v) {\n    return n(v, -216);\n  }\n  /**\n   *  Return a new ``int224`` type for %%v%%.\n   */\n  static int224(v) {\n    return n(v, -224);\n  }\n  /**\n   *  Return a new ``int232`` type for %%v%%.\n   */\n  static int232(v) {\n    return n(v, -232);\n  }\n  /**\n   *  Return a new ``int240`` type for %%v%%.\n   */\n  static int240(v) {\n    return n(v, -240);\n  }\n  /**\n   *  Return a new ``int248`` type for %%v%%.\n   */\n  static int248(v) {\n    return n(v, -248);\n  }\n  /**\n   *  Return a new ``int256`` type for %%v%%.\n   */\n  static int256(v) {\n    return n(v, -256);\n  }\n  /**\n   *  Return a new ``int256`` type for %%v%%.\n   */\n  static int(v) {\n    return n(v, -256);\n  }\n  /**\n   *  Return a new ``bytes1`` type for %%v%%.\n   */\n  static bytes1(v) {\n    return b(v, 1);\n  }\n  /**\n   *  Return a new ``bytes2`` type for %%v%%.\n   */\n  static bytes2(v) {\n    return b(v, 2);\n  }\n  /**\n   *  Return a new ``bytes3`` type for %%v%%.\n   */\n  static bytes3(v) {\n    return b(v, 3);\n  }\n  /**\n   *  Return a new ``bytes4`` type for %%v%%.\n   */\n  static bytes4(v) {\n    return b(v, 4);\n  }\n  /**\n   *  Return a new ``bytes5`` type for %%v%%.\n   */\n  static bytes5(v) {\n    return b(v, 5);\n  }\n  /**\n   *  Return a new ``bytes6`` type for %%v%%.\n   */\n  static bytes6(v) {\n    return b(v, 6);\n  }\n  /**\n   *  Return a new ``bytes7`` type for %%v%%.\n   */\n  static bytes7(v) {\n    return b(v, 7);\n  }\n  /**\n   *  Return a new ``bytes8`` type for %%v%%.\n   */\n  static bytes8(v) {\n    return b(v, 8);\n  }\n  /**\n   *  Return a new ``bytes9`` type for %%v%%.\n   */\n  static bytes9(v) {\n    return b(v, 9);\n  }\n  /**\n   *  Return a new ``bytes10`` type for %%v%%.\n   */\n  static bytes10(v) {\n    return b(v, 10);\n  }\n  /**\n   *  Return a new ``bytes11`` type for %%v%%.\n   */\n  static bytes11(v) {\n    return b(v, 11);\n  }\n  /**\n   *  Return a new ``bytes12`` type for %%v%%.\n   */\n  static bytes12(v) {\n    return b(v, 12);\n  }\n  /**\n   *  Return a new ``bytes13`` type for %%v%%.\n   */\n  static bytes13(v) {\n    return b(v, 13);\n  }\n  /**\n   *  Return a new ``bytes14`` type for %%v%%.\n   */\n  static bytes14(v) {\n    return b(v, 14);\n  }\n  /**\n   *  Return a new ``bytes15`` type for %%v%%.\n   */\n  static bytes15(v) {\n    return b(v, 15);\n  }\n  /**\n   *  Return a new ``bytes16`` type for %%v%%.\n   */\n  static bytes16(v) {\n    return b(v, 16);\n  }\n  /**\n   *  Return a new ``bytes17`` type for %%v%%.\n   */\n  static bytes17(v) {\n    return b(v, 17);\n  }\n  /**\n   *  Return a new ``bytes18`` type for %%v%%.\n   */\n  static bytes18(v) {\n    return b(v, 18);\n  }\n  /**\n   *  Return a new ``bytes19`` type for %%v%%.\n   */\n  static bytes19(v) {\n    return b(v, 19);\n  }\n  /**\n   *  Return a new ``bytes20`` type for %%v%%.\n   */\n  static bytes20(v) {\n    return b(v, 20);\n  }\n  /**\n   *  Return a new ``bytes21`` type for %%v%%.\n   */\n  static bytes21(v) {\n    return b(v, 21);\n  }\n  /**\n   *  Return a new ``bytes22`` type for %%v%%.\n   */\n  static bytes22(v) {\n    return b(v, 22);\n  }\n  /**\n   *  Return a new ``bytes23`` type for %%v%%.\n   */\n  static bytes23(v) {\n    return b(v, 23);\n  }\n  /**\n   *  Return a new ``bytes24`` type for %%v%%.\n   */\n  static bytes24(v) {\n    return b(v, 24);\n  }\n  /**\n   *  Return a new ``bytes25`` type for %%v%%.\n   */\n  static bytes25(v) {\n    return b(v, 25);\n  }\n  /**\n   *  Return a new ``bytes26`` type for %%v%%.\n   */\n  static bytes26(v) {\n    return b(v, 26);\n  }\n  /**\n   *  Return a new ``bytes27`` type for %%v%%.\n   */\n  static bytes27(v) {\n    return b(v, 27);\n  }\n  /**\n   *  Return a new ``bytes28`` type for %%v%%.\n   */\n  static bytes28(v) {\n    return b(v, 28);\n  }\n  /**\n   *  Return a new ``bytes29`` type for %%v%%.\n   */\n  static bytes29(v) {\n    return b(v, 29);\n  }\n  /**\n   *  Return a new ``bytes30`` type for %%v%%.\n   */\n  static bytes30(v) {\n    return b(v, 30);\n  }\n  /**\n   *  Return a new ``bytes31`` type for %%v%%.\n   */\n  static bytes31(v) {\n    return b(v, 31);\n  }\n  /**\n   *  Return a new ``bytes32`` type for %%v%%.\n   */\n  static bytes32(v) {\n    return b(v, 32);\n  }\n  /**\n   *  Return a new ``address`` type for %%v%%.\n   */\n  static address(v) {\n    return new Typed(_gaurd, \"address\", v);\n  }\n  /**\n   *  Return a new ``bool`` type for %%v%%.\n   */\n  static bool(v) {\n    return new Typed(_gaurd, \"bool\", !!v);\n  }\n  /**\n   *  Return a new ``bytes`` type for %%v%%.\n   */\n  static bytes(v) {\n    return new Typed(_gaurd, \"bytes\", v);\n  }\n  /**\n   *  Return a new ``string`` type for %%v%%.\n   */\n  static string(v) {\n    return new Typed(_gaurd, \"string\", v);\n  }\n  /**\n   *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.\n   */\n  static array(v, dynamic) {\n    throw new Error(\"not implemented yet\");\n    return new Typed(_gaurd, \"array\", v, dynamic);\n  }\n  /**\n   *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.\n   */\n  static tuple(v, name) {\n    throw new Error(\"not implemented yet\");\n    return new Typed(_gaurd, \"tuple\", v, name);\n  }\n  /**\n   *  Return a new ``uint8`` type for %%v%%.\n   */\n  static overrides(v) {\n    return new Typed(_gaurd, \"overrides\", Object.assign({}, v));\n  }\n  /**\n   *  Returns true only if %%value%% is a [[Typed]] instance.\n   */\n  static isTyped(value) {\n    return value && typeof value === \"object\" && \"_typedSymbol\" in value && value._typedSymbol === _typedSymbol;\n  }\n  /**\n   *  If the value is a [[Typed]] instance, validates the underlying value\n   *  and returns it, otherwise returns value directly.\n   *\n   *  This is useful for functions that with to accept either a [[Typed]]\n   *  object or values.\n   */\n  static dereference(value, type) {\n    if (Typed.isTyped(value)) {\n      if (value.type !== type) {\n        throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);\n      }\n      return value.value;\n    }\n    return value;\n  }\n}","map":{"version":3,"names":["assertPrivate","defineProperties","_gaurd","n","value","width","signed","Typed","b","size","_typedSymbol","Symbol","for","type","options","constructor","gaurd","format","Error","map","v","join","defaultValue","minValue","maxValue","isBigInt","match","isData","startsWith","isString","tupleName","TypeError","arrayLength","length","from","uint8","uint16","uint24","uint32","uint40","uint48","uint56","uint64","uint72","uint80","uint88","uint96","uint104","uint112","uint120","uint128","uint136","uint144","uint152","uint160","uint168","uint176","uint184","uint192","uint200","uint208","uint216","uint224","uint232","uint240","uint248","uint256","uint","int8","int16","int24","int32","int40","int48","int56","int64","int72","int80","int88","int96","int104","int112","int120","int128","int136","int144","int152","int160","int168","int176","int184","int192","int200","int208","int216","int224","int232","int240","int248","int256","int","bytes1","bytes2","bytes3","bytes4","bytes5","bytes6","bytes7","bytes8","bytes9","bytes10","bytes11","bytes12","bytes13","bytes14","bytes15","bytes16","bytes17","bytes18","bytes19","bytes20","bytes21","bytes22","bytes23","bytes24","bytes25","bytes26","bytes27","bytes28","bytes29","bytes30","bytes31","bytes32","address","bool","bytes","string","array","dynamic","tuple","name","overrides","Object","assign","isTyped","dereference"],"sources":["C:/Users/hikme/OneDrive/Masaüstü/metamask-connection/metamask-connection/node_modules/ethers/lib.esm/abi/typed.js"],"sourcesContent":["/**\n *  A Typed object allows a value to have its type explicitly\n *  specified.\n *\n *  For example, in Solidity, the value ``45`` could represent a\n *  ``uint8`` or a ``uint256``. The value ``0x1234`` could represent\n *  a ``bytes2`` or ``bytes``.\n *\n *  Since JavaScript has no meaningful way to explicitly inform any\n *  APIs which what the type is, this allows transparent interoperation\n *  with Soldity.\n *\n *  @_subsection: api/abi:Typed Values\n */\nimport { assertPrivate, defineProperties } from \"../utils/index.js\";\nconst _gaurd = {};\nfunction n(value, width) {\n    let signed = false;\n    if (width < 0) {\n        signed = true;\n        width *= -1;\n    }\n    // @TODO: Check range is valid for value\n    return new Typed(_gaurd, `${signed ? \"\" : \"u\"}int${width}`, value, { signed, width });\n}\nfunction b(value, size) {\n    // @TODO: Check range is valid for value\n    return new Typed(_gaurd, `bytes${(size) ? size : \"\"}`, value, { size });\n}\nconst _typedSymbol = Symbol.for(\"_ethers_typed\");\n/**\n *  The **Typed** class to wrap values providing explicit type information.\n */\nexport class Typed {\n    /**\n     *  The type, as a Solidity-compatible type.\n     */\n    type;\n    /**\n     *  The actual value.\n     */\n    value;\n    #options;\n    /**\n     *  @_ignore:\n     */\n    _typedSymbol;\n    /**\n     *  @_ignore:\n     */\n    constructor(gaurd, type, value, options) {\n        if (options == null) {\n            options = null;\n        }\n        assertPrivate(_gaurd, gaurd, \"Typed\");\n        defineProperties(this, { _typedSymbol, type, value });\n        this.#options = options;\n        // Check the value is valid\n        this.format();\n    }\n    /**\n     *  Format the type as a Human-Readable type.\n     */\n    format() {\n        if (this.type === \"array\") {\n            throw new Error(\"\");\n        }\n        else if (this.type === \"dynamicArray\") {\n            throw new Error(\"\");\n        }\n        else if (this.type === \"tuple\") {\n            return `tuple(${this.value.map((v) => v.format()).join(\",\")})`;\n        }\n        return this.type;\n    }\n    /**\n     *  The default value returned by this type.\n     */\n    defaultValue() {\n        return 0;\n    }\n    /**\n     *  The minimum value for numeric types.\n     */\n    minValue() {\n        return 0;\n    }\n    /**\n     *  The maximum value for numeric types.\n     */\n    maxValue() {\n        return 0;\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].\n     */\n    isBigInt() {\n        return !!(this.type.match(/^u?int[0-9]+$/));\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedData]].\n     */\n    isData() {\n        return this.type.startsWith(\"bytes\");\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedString]].\n     */\n    isString() {\n        return (this.type === \"string\");\n    }\n    /**\n     *  Returns the tuple name, if this is a tuple. Throws otherwise.\n     */\n    get tupleName() {\n        if (this.type !== \"tuple\") {\n            throw TypeError(\"not a tuple\");\n        }\n        return this.#options;\n    }\n    // Returns the length of this type as an array\n    // - `null` indicates the length is unforced, it could be dynamic\n    // - `-1` indicates the length is dynamic\n    // - any other value indicates it is a static array and is its length\n    /**\n     *  Returns the length of the array type or ``-1`` if it is dynamic.\n     *\n     *  Throws if the type is not an array.\n     */\n    get arrayLength() {\n        if (this.type !== \"array\") {\n            throw TypeError(\"not an array\");\n        }\n        if (this.#options === true) {\n            return -1;\n        }\n        if (this.#options === false) {\n            return (this.value).length;\n        }\n        return null;\n    }\n    /**\n     *  Returns a new **Typed** of %%type%% with the %%value%%.\n     */\n    static from(type, value) {\n        return new Typed(_gaurd, type, value);\n    }\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */\n    static uint8(v) { return n(v, 8); }\n    /**\n     *  Return a new ``uint16`` type for %%v%%.\n     */\n    static uint16(v) { return n(v, 16); }\n    /**\n     *  Return a new ``uint24`` type for %%v%%.\n     */\n    static uint24(v) { return n(v, 24); }\n    /**\n     *  Return a new ``uint32`` type for %%v%%.\n     */\n    static uint32(v) { return n(v, 32); }\n    /**\n     *  Return a new ``uint40`` type for %%v%%.\n     */\n    static uint40(v) { return n(v, 40); }\n    /**\n     *  Return a new ``uint48`` type for %%v%%.\n     */\n    static uint48(v) { return n(v, 48); }\n    /**\n     *  Return a new ``uint56`` type for %%v%%.\n     */\n    static uint56(v) { return n(v, 56); }\n    /**\n     *  Return a new ``uint64`` type for %%v%%.\n     */\n    static uint64(v) { return n(v, 64); }\n    /**\n     *  Return a new ``uint72`` type for %%v%%.\n     */\n    static uint72(v) { return n(v, 72); }\n    /**\n     *  Return a new ``uint80`` type for %%v%%.\n     */\n    static uint80(v) { return n(v, 80); }\n    /**\n     *  Return a new ``uint88`` type for %%v%%.\n     */\n    static uint88(v) { return n(v, 88); }\n    /**\n     *  Return a new ``uint96`` type for %%v%%.\n     */\n    static uint96(v) { return n(v, 96); }\n    /**\n     *  Return a new ``uint104`` type for %%v%%.\n     */\n    static uint104(v) { return n(v, 104); }\n    /**\n     *  Return a new ``uint112`` type for %%v%%.\n     */\n    static uint112(v) { return n(v, 112); }\n    /**\n     *  Return a new ``uint120`` type for %%v%%.\n     */\n    static uint120(v) { return n(v, 120); }\n    /**\n     *  Return a new ``uint128`` type for %%v%%.\n     */\n    static uint128(v) { return n(v, 128); }\n    /**\n     *  Return a new ``uint136`` type for %%v%%.\n     */\n    static uint136(v) { return n(v, 136); }\n    /**\n     *  Return a new ``uint144`` type for %%v%%.\n     */\n    static uint144(v) { return n(v, 144); }\n    /**\n     *  Return a new ``uint152`` type for %%v%%.\n     */\n    static uint152(v) { return n(v, 152); }\n    /**\n     *  Return a new ``uint160`` type for %%v%%.\n     */\n    static uint160(v) { return n(v, 160); }\n    /**\n     *  Return a new ``uint168`` type for %%v%%.\n     */\n    static uint168(v) { return n(v, 168); }\n    /**\n     *  Return a new ``uint176`` type for %%v%%.\n     */\n    static uint176(v) { return n(v, 176); }\n    /**\n     *  Return a new ``uint184`` type for %%v%%.\n     */\n    static uint184(v) { return n(v, 184); }\n    /**\n     *  Return a new ``uint192`` type for %%v%%.\n     */\n    static uint192(v) { return n(v, 192); }\n    /**\n     *  Return a new ``uint200`` type for %%v%%.\n     */\n    static uint200(v) { return n(v, 200); }\n    /**\n     *  Return a new ``uint208`` type for %%v%%.\n     */\n    static uint208(v) { return n(v, 208); }\n    /**\n     *  Return a new ``uint216`` type for %%v%%.\n     */\n    static uint216(v) { return n(v, 216); }\n    /**\n     *  Return a new ``uint224`` type for %%v%%.\n     */\n    static uint224(v) { return n(v, 224); }\n    /**\n     *  Return a new ``uint232`` type for %%v%%.\n     */\n    static uint232(v) { return n(v, 232); }\n    /**\n     *  Return a new ``uint240`` type for %%v%%.\n     */\n    static uint240(v) { return n(v, 240); }\n    /**\n     *  Return a new ``uint248`` type for %%v%%.\n     */\n    static uint248(v) { return n(v, 248); }\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */\n    static uint256(v) { return n(v, 256); }\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */\n    static uint(v) { return n(v, 256); }\n    /**\n     *  Return a new ``int8`` type for %%v%%.\n     */\n    static int8(v) { return n(v, -8); }\n    /**\n     *  Return a new ``int16`` type for %%v%%.\n     */\n    static int16(v) { return n(v, -16); }\n    /**\n     *  Return a new ``int24`` type for %%v%%.\n     */\n    static int24(v) { return n(v, -24); }\n    /**\n     *  Return a new ``int32`` type for %%v%%.\n     */\n    static int32(v) { return n(v, -32); }\n    /**\n     *  Return a new ``int40`` type for %%v%%.\n     */\n    static int40(v) { return n(v, -40); }\n    /**\n     *  Return a new ``int48`` type for %%v%%.\n     */\n    static int48(v) { return n(v, -48); }\n    /**\n     *  Return a new ``int56`` type for %%v%%.\n     */\n    static int56(v) { return n(v, -56); }\n    /**\n     *  Return a new ``int64`` type for %%v%%.\n     */\n    static int64(v) { return n(v, -64); }\n    /**\n     *  Return a new ``int72`` type for %%v%%.\n     */\n    static int72(v) { return n(v, -72); }\n    /**\n     *  Return a new ``int80`` type for %%v%%.\n     */\n    static int80(v) { return n(v, -80); }\n    /**\n     *  Return a new ``int88`` type for %%v%%.\n     */\n    static int88(v) { return n(v, -88); }\n    /**\n     *  Return a new ``int96`` type for %%v%%.\n     */\n    static int96(v) { return n(v, -96); }\n    /**\n     *  Return a new ``int104`` type for %%v%%.\n     */\n    static int104(v) { return n(v, -104); }\n    /**\n     *  Return a new ``int112`` type for %%v%%.\n     */\n    static int112(v) { return n(v, -112); }\n    /**\n     *  Return a new ``int120`` type for %%v%%.\n     */\n    static int120(v) { return n(v, -120); }\n    /**\n     *  Return a new ``int128`` type for %%v%%.\n     */\n    static int128(v) { return n(v, -128); }\n    /**\n     *  Return a new ``int136`` type for %%v%%.\n     */\n    static int136(v) { return n(v, -136); }\n    /**\n     *  Return a new ``int144`` type for %%v%%.\n     */\n    static int144(v) { return n(v, -144); }\n    /**\n     *  Return a new ``int52`` type for %%v%%.\n     */\n    static int152(v) { return n(v, -152); }\n    /**\n     *  Return a new ``int160`` type for %%v%%.\n     */\n    static int160(v) { return n(v, -160); }\n    /**\n     *  Return a new ``int168`` type for %%v%%.\n     */\n    static int168(v) { return n(v, -168); }\n    /**\n     *  Return a new ``int176`` type for %%v%%.\n     */\n    static int176(v) { return n(v, -176); }\n    /**\n     *  Return a new ``int184`` type for %%v%%.\n     */\n    static int184(v) { return n(v, -184); }\n    /**\n     *  Return a new ``int92`` type for %%v%%.\n     */\n    static int192(v) { return n(v, -192); }\n    /**\n     *  Return a new ``int200`` type for %%v%%.\n     */\n    static int200(v) { return n(v, -200); }\n    /**\n     *  Return a new ``int208`` type for %%v%%.\n     */\n    static int208(v) { return n(v, -208); }\n    /**\n     *  Return a new ``int216`` type for %%v%%.\n     */\n    static int216(v) { return n(v, -216); }\n    /**\n     *  Return a new ``int224`` type for %%v%%.\n     */\n    static int224(v) { return n(v, -224); }\n    /**\n     *  Return a new ``int232`` type for %%v%%.\n     */\n    static int232(v) { return n(v, -232); }\n    /**\n     *  Return a new ``int240`` type for %%v%%.\n     */\n    static int240(v) { return n(v, -240); }\n    /**\n     *  Return a new ``int248`` type for %%v%%.\n     */\n    static int248(v) { return n(v, -248); }\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */\n    static int256(v) { return n(v, -256); }\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */\n    static int(v) { return n(v, -256); }\n    /**\n     *  Return a new ``bytes1`` type for %%v%%.\n     */\n    static bytes1(v) { return b(v, 1); }\n    /**\n     *  Return a new ``bytes2`` type for %%v%%.\n     */\n    static bytes2(v) { return b(v, 2); }\n    /**\n     *  Return a new ``bytes3`` type for %%v%%.\n     */\n    static bytes3(v) { return b(v, 3); }\n    /**\n     *  Return a new ``bytes4`` type for %%v%%.\n     */\n    static bytes4(v) { return b(v, 4); }\n    /**\n     *  Return a new ``bytes5`` type for %%v%%.\n     */\n    static bytes5(v) { return b(v, 5); }\n    /**\n     *  Return a new ``bytes6`` type for %%v%%.\n     */\n    static bytes6(v) { return b(v, 6); }\n    /**\n     *  Return a new ``bytes7`` type for %%v%%.\n     */\n    static bytes7(v) { return b(v, 7); }\n    /**\n     *  Return a new ``bytes8`` type for %%v%%.\n     */\n    static bytes8(v) { return b(v, 8); }\n    /**\n     *  Return a new ``bytes9`` type for %%v%%.\n     */\n    static bytes9(v) { return b(v, 9); }\n    /**\n     *  Return a new ``bytes10`` type for %%v%%.\n     */\n    static bytes10(v) { return b(v, 10); }\n    /**\n     *  Return a new ``bytes11`` type for %%v%%.\n     */\n    static bytes11(v) { return b(v, 11); }\n    /**\n     *  Return a new ``bytes12`` type for %%v%%.\n     */\n    static bytes12(v) { return b(v, 12); }\n    /**\n     *  Return a new ``bytes13`` type for %%v%%.\n     */\n    static bytes13(v) { return b(v, 13); }\n    /**\n     *  Return a new ``bytes14`` type for %%v%%.\n     */\n    static bytes14(v) { return b(v, 14); }\n    /**\n     *  Return a new ``bytes15`` type for %%v%%.\n     */\n    static bytes15(v) { return b(v, 15); }\n    /**\n     *  Return a new ``bytes16`` type for %%v%%.\n     */\n    static bytes16(v) { return b(v, 16); }\n    /**\n     *  Return a new ``bytes17`` type for %%v%%.\n     */\n    static bytes17(v) { return b(v, 17); }\n    /**\n     *  Return a new ``bytes18`` type for %%v%%.\n     */\n    static bytes18(v) { return b(v, 18); }\n    /**\n     *  Return a new ``bytes19`` type for %%v%%.\n     */\n    static bytes19(v) { return b(v, 19); }\n    /**\n     *  Return a new ``bytes20`` type for %%v%%.\n     */\n    static bytes20(v) { return b(v, 20); }\n    /**\n     *  Return a new ``bytes21`` type for %%v%%.\n     */\n    static bytes21(v) { return b(v, 21); }\n    /**\n     *  Return a new ``bytes22`` type for %%v%%.\n     */\n    static bytes22(v) { return b(v, 22); }\n    /**\n     *  Return a new ``bytes23`` type for %%v%%.\n     */\n    static bytes23(v) { return b(v, 23); }\n    /**\n     *  Return a new ``bytes24`` type for %%v%%.\n     */\n    static bytes24(v) { return b(v, 24); }\n    /**\n     *  Return a new ``bytes25`` type for %%v%%.\n     */\n    static bytes25(v) { return b(v, 25); }\n    /**\n     *  Return a new ``bytes26`` type for %%v%%.\n     */\n    static bytes26(v) { return b(v, 26); }\n    /**\n     *  Return a new ``bytes27`` type for %%v%%.\n     */\n    static bytes27(v) { return b(v, 27); }\n    /**\n     *  Return a new ``bytes28`` type for %%v%%.\n     */\n    static bytes28(v) { return b(v, 28); }\n    /**\n     *  Return a new ``bytes29`` type for %%v%%.\n     */\n    static bytes29(v) { return b(v, 29); }\n    /**\n     *  Return a new ``bytes30`` type for %%v%%.\n     */\n    static bytes30(v) { return b(v, 30); }\n    /**\n     *  Return a new ``bytes31`` type for %%v%%.\n     */\n    static bytes31(v) { return b(v, 31); }\n    /**\n     *  Return a new ``bytes32`` type for %%v%%.\n     */\n    static bytes32(v) { return b(v, 32); }\n    /**\n     *  Return a new ``address`` type for %%v%%.\n     */\n    static address(v) { return new Typed(_gaurd, \"address\", v); }\n    /**\n     *  Return a new ``bool`` type for %%v%%.\n     */\n    static bool(v) { return new Typed(_gaurd, \"bool\", !!v); }\n    /**\n     *  Return a new ``bytes`` type for %%v%%.\n     */\n    static bytes(v) { return new Typed(_gaurd, \"bytes\", v); }\n    /**\n     *  Return a new ``string`` type for %%v%%.\n     */\n    static string(v) { return new Typed(_gaurd, \"string\", v); }\n    /**\n     *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.\n     */\n    static array(v, dynamic) {\n        throw new Error(\"not implemented yet\");\n        return new Typed(_gaurd, \"array\", v, dynamic);\n    }\n    /**\n     *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.\n     */\n    static tuple(v, name) {\n        throw new Error(\"not implemented yet\");\n        return new Typed(_gaurd, \"tuple\", v, name);\n    }\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */\n    static overrides(v) {\n        return new Typed(_gaurd, \"overrides\", Object.assign({}, v));\n    }\n    /**\n     *  Returns true only if %%value%% is a [[Typed]] instance.\n     */\n    static isTyped(value) {\n        return (value\n            && typeof (value) === \"object\"\n            && \"_typedSymbol\" in value\n            && value._typedSymbol === _typedSymbol);\n    }\n    /**\n     *  If the value is a [[Typed]] instance, validates the underlying value\n     *  and returns it, otherwise returns value directly.\n     *\n     *  This is useful for functions that with to accept either a [[Typed]]\n     *  object or values.\n     */\n    static dereference(value, type) {\n        if (Typed.isTyped(value)) {\n            if (value.type !== type) {\n                throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);\n            }\n            return value.value;\n        }\n        return value;\n    }\n}\n//# sourceMappingURL=typed.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}