{"ast":null,"code":"/**\n *  When interacting with Ethereum, it is necessary to use a private\n *  key authenticate actions by signing a payload.\n *\n *  Wallets are the simplest way to expose the concept of an\n *  //Externally Owner Account// (EOA) as it wraps a private key\n *  and supports high-level methods to sign common types of interaction\n *  and send transactions.\n *\n *  The class most developers will want to use is [[Wallet]], which\n *  can load a private key directly or from any common wallet format.\n *\n *  The [[HDNodeWallet]] can be used when it is necessary to access\n *  low-level details of how an HD wallets are derived, exported\n *  or imported.\n *\n *  @_section: api/wallet:Wallets  [about-wallets]\n */\nexport { BaseWallet } from \"./base-wallet.js\";\nexport { defaultPath, getAccountPath, getIndexedAccountPath, HDNodeWallet, HDNodeVoidWallet } from \"./hdwallet.js\";\nexport { isCrowdsaleJson, decryptCrowdsaleJson } from \"./json-crowdsale.js\";\nexport { isKeystoreJson, decryptKeystoreJsonSync, decryptKeystoreJson, encryptKeystoreJson, encryptKeystoreJsonSync } from \"./json-keystore.js\";\nexport { Mnemonic } from \"./mnemonic.js\";\nexport { Wallet } from \"./wallet.js\";","map":{"version":3,"names":["BaseWallet","defaultPath","getAccountPath","getIndexedAccountPath","HDNodeWallet","HDNodeVoidWallet","isCrowdsaleJson","decryptCrowdsaleJson","isKeystoreJson","decryptKeystoreJsonSync","decryptKeystoreJson","encryptKeystoreJson","encryptKeystoreJsonSync","Mnemonic","Wallet"],"sources":["C:/Users/hikme/OneDrive/Masaüstü/metamask-connection/metamask-connection/node_modules/ethers/lib.esm/wallet/index.js"],"sourcesContent":["/**\n *  When interacting with Ethereum, it is necessary to use a private\n *  key authenticate actions by signing a payload.\n *\n *  Wallets are the simplest way to expose the concept of an\n *  //Externally Owner Account// (EOA) as it wraps a private key\n *  and supports high-level methods to sign common types of interaction\n *  and send transactions.\n *\n *  The class most developers will want to use is [[Wallet]], which\n *  can load a private key directly or from any common wallet format.\n *\n *  The [[HDNodeWallet]] can be used when it is necessary to access\n *  low-level details of how an HD wallets are derived, exported\n *  or imported.\n *\n *  @_section: api/wallet:Wallets  [about-wallets]\n */\nexport { BaseWallet } from \"./base-wallet.js\";\nexport { defaultPath, getAccountPath, getIndexedAccountPath, HDNodeWallet, HDNodeVoidWallet, } from \"./hdwallet.js\";\nexport { isCrowdsaleJson, decryptCrowdsaleJson } from \"./json-crowdsale.js\";\nexport { isKeystoreJson, decryptKeystoreJsonSync, decryptKeystoreJson, encryptKeystoreJson, encryptKeystoreJsonSync } from \"./json-keystore.js\";\nexport { Mnemonic } from \"./mnemonic.js\";\nexport { Wallet } from \"./wallet.js\";\n//# sourceMappingURL=index.js.map"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,WAAW,EAAEC,cAAc,EAAEC,qBAAqB,EAAEC,YAAY,EAAEC,gBAAgB,QAAS,eAAe;AACnH,SAASC,eAAe,EAAEC,oBAAoB,QAAQ,qBAAqB;AAC3E,SAASC,cAAc,EAAEC,uBAAuB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,uBAAuB,QAAQ,oBAAoB;AAC/I,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,MAAM,QAAQ,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}