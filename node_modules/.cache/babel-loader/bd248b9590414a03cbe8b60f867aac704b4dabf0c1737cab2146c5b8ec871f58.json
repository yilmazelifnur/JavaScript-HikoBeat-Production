{"ast":null,"code":"//import { TypedDataDomain, TypedDataField } from \"@ethersproject/providerabstract-signer\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256 } from \"../crypto/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport { concat, defineProperties, getBigInt, getBytes, hexlify, isHexString, mask, toBeHex, toQuantity, toTwos, zeroPadValue, assertArgument } from \"../utils/index.js\";\nimport { id } from \"./id.js\";\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst BN__1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n;\n;\nfunction hexPadRight(value) {\n  const bytes = getBytes(value);\n  const padOffset = bytes.length % 32;\n  if (padOffset) {\n    return concat([bytes, padding.slice(padOffset)]);\n  }\n  return hexlify(bytes);\n}\nconst hexTrue = toBeHex(BN_1, 32);\nconst hexFalse = toBeHex(BN_0, 32);\nconst domainFieldTypes = {\n  name: \"string\",\n  version: \"string\",\n  chainId: \"uint256\",\n  verifyingContract: \"address\",\n  salt: \"bytes32\"\n};\nconst domainFieldNames = [\"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"];\nfunction checkString(key) {\n  return function (value) {\n    assertArgument(typeof value === \"string\", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n    return value;\n  };\n}\nconst domainChecks = {\n  name: checkString(\"name\"),\n  version: checkString(\"version\"),\n  chainId: function (_value) {\n    const value = getBigInt(_value, \"domain.chainId\");\n    assertArgument(value >= 0, \"invalid chain ID\", \"domain.chainId\", _value);\n    if (Number.isSafeInteger(value)) {\n      return Number(value);\n    }\n    return toQuantity(value);\n  },\n  verifyingContract: function (value) {\n    try {\n      return getAddress(value).toLowerCase();\n    } catch (error) {}\n    assertArgument(false, `invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n  },\n  salt: function (value) {\n    const bytes = getBytes(value, \"domain.salt\");\n    assertArgument(bytes.length === 32, `invalid domain value \"salt\"`, \"domain.salt\", value);\n    return hexlify(bytes);\n  }\n};\nfunction getBaseEncoder(type) {\n  // intXX and uintXX\n  {\n    const match = type.match(/^(u?)int(\\d*)$/);\n    if (match) {\n      const signed = match[1] === \"\";\n      const width = parseInt(match[2] || \"256\");\n      assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && (match[2] == null || match[2] === String(width)), \"invalid numeric width\", \"type\", type);\n      const boundsUpper = mask(BN_MAX_UINT256, signed ? width - 1 : width);\n      const boundsLower = signed ? (boundsUpper + BN_1) * BN__1 : BN_0;\n      return function (_value) {\n        const value = getBigInt(_value, \"value\");\n        assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, \"value\", value);\n        return toBeHex(signed ? toTwos(value, 256) : value, 32);\n      };\n    }\n  }\n  // bytesXX\n  {\n    const match = type.match(/^bytes(\\d+)$/);\n    if (match) {\n      const width = parseInt(match[1]);\n      assertArgument(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\n      return function (value) {\n        const bytes = getBytes(value);\n        assertArgument(bytes.length === width, `invalid length for ${type}`, \"value\", value);\n        return hexPadRight(value);\n      };\n    }\n  }\n  switch (type) {\n    case \"address\":\n      return function (value) {\n        return zeroPadValue(getAddress(value), 32);\n      };\n    case \"bool\":\n      return function (value) {\n        return !value ? hexFalse : hexTrue;\n      };\n    case \"bytes\":\n      return function (value) {\n        return keccak256(value);\n      };\n    case \"string\":\n      return function (value) {\n        return id(value);\n      };\n  }\n  return null;\n}\nfunction encodeType(name, fields) {\n  return `${name}(${fields.map(({\n    name,\n    type\n  }) => type + \" \" + name).join(\",\")})`;\n}\n/**\n *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads\n *  for signed typed data.\n *\n *  This is useful for those that wish to compute various components of a\n *  typed data hash, primary types, or sub-components, but generally the\n *  higher level [[Signer-signTypedData]] is more useful.\n */\nexport class TypedDataEncoder {\n  /**\n   *  The primary type for the structured [[types]].\n   *\n   *  This is derived automatically from the [[types]], since no\n   *  recursion is possible, once the DAG for the types is consturcted\n   *  internally, the primary type must be the only remaining type with\n   *  no parent nodes.\n   */\n  primaryType;\n  #types;\n  /**\n   *  The types.\n   */\n  get types() {\n    return JSON.parse(this.#types);\n  }\n  #fullTypes;\n  #encoderCache;\n  /**\n   *  Create a new **TypedDataEncoder** for %%types%%.\n   *\n   *  This performs all necessary checking that types are valid and\n   *  do not violate the [[link-eip-712]] structural constraints as\n   *  well as computes the [[primaryType]].\n   */\n  constructor(types) {\n    this.#types = JSON.stringify(types);\n    this.#fullTypes = new Map();\n    this.#encoderCache = new Map();\n    // Link struct types to their direct child structs\n    const links = new Map();\n    // Link structs to structs which contain them as a child\n    const parents = new Map();\n    // Link all subtypes within a given struct\n    const subtypes = new Map();\n    Object.keys(types).forEach(type => {\n      links.set(type, new Set());\n      parents.set(type, []);\n      subtypes.set(type, new Set());\n    });\n    for (const name in types) {\n      const uniqueNames = new Set();\n      for (const field of types[name]) {\n        // Check each field has a unique name\n        assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n        uniqueNames.add(field.name);\n        // Get the base type (drop any array specifiers)\n        const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1] || null;\n        assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n        // Is this a base encoding type?\n        const encoder = getBaseEncoder(baseType);\n        if (encoder) {\n          continue;\n        }\n        assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n        // Add linkage\n        parents.get(baseType).push(name);\n        links.get(name).add(baseType);\n      }\n    }\n    // Deduce the primary type\n    const primaryTypes = Array.from(parents.keys()).filter(n => parents.get(n).length === 0);\n    assertArgument(primaryTypes.length !== 0, \"missing primary type\", \"types\", types);\n    assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map(t => JSON.stringify(t)).join(\", \")}`, \"types\", types);\n    defineProperties(this, {\n      primaryType: primaryTypes[0]\n    });\n    // Check for circular type references\n    function checkCircular(type, found) {\n      assertArgument(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n      found.add(type);\n      for (const child of links.get(type)) {\n        if (!parents.has(child)) {\n          continue;\n        }\n        // Recursively check children\n        checkCircular(child, found);\n        // Mark all ancestors as having this decendant\n        for (const subtype of found) {\n          subtypes.get(subtype).add(child);\n        }\n      }\n      found.delete(type);\n    }\n    checkCircular(this.primaryType, new Set());\n    // Compute each fully describe type\n    for (const [name, set] of subtypes) {\n      const st = Array.from(set);\n      st.sort();\n      this.#fullTypes.set(name, encodeType(name, types[name]) + st.map(t => encodeType(t, types[t])).join(\"\"));\n    }\n  }\n  /**\n   *  Returnthe encoder for the specific %%type%%.\n   */\n  getEncoder(type) {\n    let encoder = this.#encoderCache.get(type);\n    if (!encoder) {\n      encoder = this.#getEncoder(type);\n      this.#encoderCache.set(type, encoder);\n    }\n    return encoder;\n  }\n  #getEncoder(type) {\n    // Basic encoder type (address, bool, uint256, etc)\n    {\n      const encoder = getBaseEncoder(type);\n      if (encoder) {\n        return encoder;\n      }\n    }\n    // Array\n    const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n    if (match) {\n      const subtype = match[1];\n      const subEncoder = this.getEncoder(subtype);\n      return value => {\n        assertArgument(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${parseInt(match[3])}`, \"value\", value);\n        let result = value.map(subEncoder);\n        if (this.#fullTypes.has(subtype)) {\n          result = result.map(keccak256);\n        }\n        return keccak256(concat(result));\n      };\n    }\n    // Struct\n    const fields = this.types[type];\n    if (fields) {\n      const encodedType = id(this.#fullTypes.get(type));\n      return value => {\n        const values = fields.map(({\n          name,\n          type\n        }) => {\n          const result = this.getEncoder(type)(value[name]);\n          if (this.#fullTypes.has(type)) {\n            return keccak256(result);\n          }\n          return result;\n        });\n        values.unshift(encodedType);\n        return concat(values);\n      };\n    }\n    assertArgument(false, `unknown type: ${type}`, \"type\", type);\n  }\n  /**\n   *  Return the full type for %%name%%.\n   */\n  encodeType(name) {\n    const result = this.#fullTypes.get(name);\n    assertArgument(result, `unknown type: ${JSON.stringify(name)}`, \"name\", name);\n    return result;\n  }\n  /**\n   *  Return the encoded %%value%% for the %%type%%.\n   */\n  encodeData(type, value) {\n    return this.getEncoder(type)(value);\n  }\n  /**\n   *  Returns the hash of %%value%% for the type of %%name%%.\n   */\n  hashStruct(name, value) {\n    return keccak256(this.encodeData(name, value));\n  }\n  /**\n   *  Return the fulled encoded %%value%% for the [[types]].\n   */\n  encode(value) {\n    return this.encodeData(this.primaryType, value);\n  }\n  /**\n   *  Return the hash of the fully encoded %%value%% for the [[types]].\n   */\n  hash(value) {\n    return this.hashStruct(this.primaryType, value);\n  }\n  /**\n   *  @_ignore:\n   */\n  _visit(type, value, callback) {\n    // Basic encoder type (address, bool, uint256, etc)\n    {\n      const encoder = getBaseEncoder(type);\n      if (encoder) {\n        return callback(type, value);\n      }\n    }\n    // Array\n    const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n    if (match) {\n      assertArgument(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${parseInt(match[3])}`, \"value\", value);\n      return value.map(v => this._visit(match[1], v, callback));\n    }\n    // Struct\n    const fields = this.types[type];\n    if (fields) {\n      return fields.reduce((accum, {\n        name,\n        type\n      }) => {\n        accum[name] = this._visit(type, value[name], callback);\n        return accum;\n      }, {});\n    }\n    assertArgument(false, `unknown type: ${type}`, \"type\", type);\n  }\n  /**\n   *  Call %%calback%% for each value in %%value%%, passing the type and\n   *  component within %%value%%.\n   *\n   *  This is useful for replacing addresses or other transformation that\n   *  may be desired on each component, based on its type.\n   */\n  visit(value, callback) {\n    return this._visit(this.primaryType, value, callback);\n  }\n  /**\n   *  Create a new **TypedDataEncoder** for %%types%%.\n   */\n  static from(types) {\n    return new TypedDataEncoder(types);\n  }\n  /**\n   *  Return the primary type for %%types%%.\n   */\n  static getPrimaryType(types) {\n    return TypedDataEncoder.from(types).primaryType;\n  }\n  /**\n   *  Return the hashed struct for %%value%% using %%types%% and %%name%%.\n   */\n  static hashStruct(name, types, value) {\n    return TypedDataEncoder.from(types).hashStruct(name, value);\n  }\n  /**\n   *  Return the domain hash for %%domain%%.\n   */\n  static hashDomain(domain) {\n    const domainFields = [];\n    for (const name in domain) {\n      if (domain[name] == null) {\n        continue;\n      }\n      const type = domainFieldTypes[name];\n      assertArgument(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n      domainFields.push({\n        name,\n        type\n      });\n    }\n    domainFields.sort((a, b) => {\n      return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n    });\n    return TypedDataEncoder.hashStruct(\"EIP712Domain\", {\n      EIP712Domain: domainFields\n    }, domain);\n  }\n  /**\n   *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n   */\n  static encode(domain, types, value) {\n    return concat([\"0x1901\", TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);\n  }\n  /**\n   *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n   */\n  static hash(domain, types, value) {\n    return keccak256(TypedDataEncoder.encode(domain, types, value));\n  }\n  // Replaces all address types with ENS names with their looked up address\n  /**\n   * Resolves to the value from resolving all addresses in %%value%% for\n   * %%types%% and the %%domain%%.\n   */\n  static async resolveNames(domain, types, value, resolveName) {\n    // Make a copy to isolate it from the object passed in\n    domain = Object.assign({}, domain);\n    // Allow passing null to ignore value\n    for (const key in domain) {\n      if (domain[key] == null) {\n        delete domain[key];\n      }\n    }\n    // Look up all ENS names\n    const ensCache = {};\n    // Do we need to look up the domain's verifyingContract?\n    if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n      ensCache[domain.verifyingContract] = \"0x\";\n    }\n    // We are going to use the encoder to visit all the base values\n    const encoder = TypedDataEncoder.from(types);\n    // Get a list of all the addresses\n    encoder.visit(value, (type, value) => {\n      if (type === \"address\" && !isHexString(value, 20)) {\n        ensCache[value] = \"0x\";\n      }\n      return value;\n    });\n    // Lookup each name\n    for (const name in ensCache) {\n      ensCache[name] = await resolveName(name);\n    }\n    // Replace the domain verifyingContract if needed\n    if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n      domain.verifyingContract = ensCache[domain.verifyingContract];\n    }\n    // Replace all ENS names with their address\n    value = encoder.visit(value, (type, value) => {\n      if (type === \"address\" && ensCache[value]) {\n        return ensCache[value];\n      }\n      return value;\n    });\n    return {\n      domain,\n      value\n    };\n  }\n  /**\n   *  Returns the JSON-encoded payload expected by nodes which implement\n   *  the JSON-RPC [[link-eip-712]] method.\n   */\n  static getPayload(domain, types, value) {\n    // Validate the domain fields\n    TypedDataEncoder.hashDomain(domain);\n    // Derive the EIP712Domain Struct reference type\n    const domainValues = {};\n    const domainTypes = [];\n    domainFieldNames.forEach(name => {\n      const value = domain[name];\n      if (value == null) {\n        return;\n      }\n      domainValues[name] = domainChecks[name](value);\n      domainTypes.push({\n        name,\n        type: domainFieldTypes[name]\n      });\n    });\n    const encoder = TypedDataEncoder.from(types);\n    const typesWithDomain = Object.assign({}, types);\n    assertArgument(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n    typesWithDomain.EIP712Domain = domainTypes;\n    // Validate the data structures and types\n    encoder.encode(value);\n    return {\n      types: typesWithDomain,\n      domain: domainValues,\n      primaryType: encoder.primaryType,\n      message: encoder.visit(value, (type, value) => {\n        // bytes\n        if (type.match(/^bytes(\\d*)/)) {\n          return hexlify(getBytes(value));\n        }\n        // uint or int\n        if (type.match(/^u?int/)) {\n          return getBigInt(value).toString();\n        }\n        switch (type) {\n          case \"address\":\n            return value.toLowerCase();\n          case \"bool\":\n            return !!value;\n          case \"string\":\n            assertArgument(typeof value === \"string\", \"invalid string\", \"value\", value);\n            return value;\n        }\n        assertArgument(false, \"unsupported type\", \"type\", type);\n      })\n    };\n  }\n}\n/**\n *  Compute the address used to sign the typed data for the %%signature%%.\n */\nexport function verifyTypedData(domain, types, value, signature) {\n  return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);\n}","map":{"version":3,"names":["getAddress","keccak256","recoverAddress","concat","defineProperties","getBigInt","getBytes","hexlify","isHexString","mask","toBeHex","toQuantity","toTwos","zeroPadValue","assertArgument","id","padding","Uint8Array","fill","BN__1","BigInt","BN_0","BN_1","BN_MAX_UINT256","hexPadRight","value","bytes","padOffset","length","slice","hexTrue","hexFalse","domainFieldTypes","name","version","chainId","verifyingContract","salt","domainFieldNames","checkString","key","JSON","stringify","domainChecks","_value","Number","isSafeInteger","toLowerCase","error","getBaseEncoder","type","match","signed","width","parseInt","String","boundsUpper","boundsLower","encodeType","fields","map","join","TypedDataEncoder","primaryType","types","parse","fullTypes","encoderCache","constructor","Map","links","parents","subtypes","Object","keys","forEach","set","Set","uniqueNames","field","has","add","baseType","encoder","get","push","primaryTypes","Array","from","filter","n","t","checkCircular","found","child","subtype","delete","st","sort","getEncoder","#getEncoder","subEncoder","result","encodedType","values","unshift","encodeData","hashStruct","encode","hash","_visit","callback","v","reduce","accum","visit","getPrimaryType","hashDomain","domain","domainFields","a","b","indexOf","EIP712Domain","resolveNames","resolveName","assign","ensCache","getPayload","domainValues","domainTypes","typesWithDomain","message","toString","verifyTypedData","signature"],"sources":["C:/Users/hikme/OneDrive/Masaüstü/metamask-connection/metamask-connection/node_modules/ethers/lib.esm/hash/typed-data.js"],"sourcesContent":["//import { TypedDataDomain, TypedDataField } from \"@ethersproject/providerabstract-signer\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256 } from \"../crypto/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport { concat, defineProperties, getBigInt, getBytes, hexlify, isHexString, mask, toBeHex, toQuantity, toTwos, zeroPadValue, assertArgument } from \"../utils/index.js\";\nimport { id } from \"./id.js\";\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst BN__1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n;\n;\nfunction hexPadRight(value) {\n    const bytes = getBytes(value);\n    const padOffset = bytes.length % 32;\n    if (padOffset) {\n        return concat([bytes, padding.slice(padOffset)]);\n    }\n    return hexlify(bytes);\n}\nconst hexTrue = toBeHex(BN_1, 32);\nconst hexFalse = toBeHex(BN_0, 32);\nconst domainFieldTypes = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\nconst domainFieldNames = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\nfunction checkString(key) {\n    return function (value) {\n        assertArgument(typeof (value) === \"string\", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n        return value;\n    };\n}\nconst domainChecks = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function (_value) {\n        const value = getBigInt(_value, \"domain.chainId\");\n        assertArgument(value >= 0, \"invalid chain ID\", \"domain.chainId\", _value);\n        if (Number.isSafeInteger(value)) {\n            return Number(value);\n        }\n        return toQuantity(value);\n    },\n    verifyingContract: function (value) {\n        try {\n            return getAddress(value).toLowerCase();\n        }\n        catch (error) { }\n        assertArgument(false, `invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function (value) {\n        const bytes = getBytes(value, \"domain.salt\");\n        assertArgument(bytes.length === 32, `invalid domain value \"salt\"`, \"domain.salt\", value);\n        return hexlify(bytes);\n    }\n};\nfunction getBaseEncoder(type) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n            const width = parseInt(match[2] || \"256\");\n            assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && (match[2] == null || match[2] === String(width)), \"invalid numeric width\", \"type\", type);\n            const boundsUpper = mask(BN_MAX_UINT256, signed ? (width - 1) : width);\n            const boundsLower = signed ? ((boundsUpper + BN_1) * BN__1) : BN_0;\n            return function (_value) {\n                const value = getBigInt(_value, \"value\");\n                assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, \"value\", value);\n                return toBeHex(signed ? toTwos(value, 256) : value, 32);\n            };\n        }\n    }\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            assertArgument(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\n            return function (value) {\n                const bytes = getBytes(value);\n                assertArgument(bytes.length === width, `invalid length for ${type}`, \"value\", value);\n                return hexPadRight(value);\n            };\n        }\n    }\n    switch (type) {\n        case \"address\": return function (value) {\n            return zeroPadValue(getAddress(value), 32);\n        };\n        case \"bool\": return function (value) {\n            return ((!value) ? hexFalse : hexTrue);\n        };\n        case \"bytes\": return function (value) {\n            return keccak256(value);\n        };\n        case \"string\": return function (value) {\n            return id(value);\n        };\n    }\n    return null;\n}\nfunction encodeType(name, fields) {\n    return `${name}(${fields.map(({ name, type }) => (type + \" \" + name)).join(\",\")})`;\n}\n/**\n *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads\n *  for signed typed data.\n *\n *  This is useful for those that wish to compute various components of a\n *  typed data hash, primary types, or sub-components, but generally the\n *  higher level [[Signer-signTypedData]] is more useful.\n */\nexport class TypedDataEncoder {\n    /**\n     *  The primary type for the structured [[types]].\n     *\n     *  This is derived automatically from the [[types]], since no\n     *  recursion is possible, once the DAG for the types is consturcted\n     *  internally, the primary type must be the only remaining type with\n     *  no parent nodes.\n     */\n    primaryType;\n    #types;\n    /**\n     *  The types.\n     */\n    get types() {\n        return JSON.parse(this.#types);\n    }\n    #fullTypes;\n    #encoderCache;\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     *\n     *  This performs all necessary checking that types are valid and\n     *  do not violate the [[link-eip-712]] structural constraints as\n     *  well as computes the [[primaryType]].\n     */\n    constructor(types) {\n        this.#types = JSON.stringify(types);\n        this.#fullTypes = new Map();\n        this.#encoderCache = new Map();\n        // Link struct types to their direct child structs\n        const links = new Map();\n        // Link structs to structs which contain them as a child\n        const parents = new Map();\n        // Link all subtypes within a given struct\n        const subtypes = new Map();\n        Object.keys(types).forEach((type) => {\n            links.set(type, new Set());\n            parents.set(type, []);\n            subtypes.set(type, new Set());\n        });\n        for (const name in types) {\n            const uniqueNames = new Set();\n            for (const field of types[name]) {\n                // Check each field has a unique name\n                assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n                uniqueNames.add(field.name);\n                // Get the base type (drop any array specifiers)\n                const baseType = (field.type.match(/^([^\\x5b]*)(\\x5b|$)/))[1] || null;\n                assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) {\n                    continue;\n                }\n                assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n                // Add linkage\n                parents.get(baseType).push(name);\n                links.get(name).add(baseType);\n            }\n        }\n        // Deduce the primary type\n        const primaryTypes = Array.from(parents.keys()).filter((n) => (parents.get(n).length === 0));\n        assertArgument(primaryTypes.length !== 0, \"missing primary type\", \"types\", types);\n        assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(\", \")}`, \"types\", types);\n        defineProperties(this, { primaryType: primaryTypes[0] });\n        // Check for circular type references\n        function checkCircular(type, found) {\n            assertArgument(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n            found.add(type);\n            for (const child of links.get(type)) {\n                if (!parents.has(child)) {\n                    continue;\n                }\n                // Recursively check children\n                checkCircular(child, found);\n                // Mark all ancestors as having this decendant\n                for (const subtype of found) {\n                    subtypes.get(subtype).add(child);\n                }\n            }\n            found.delete(type);\n        }\n        checkCircular(this.primaryType, new Set());\n        // Compute each fully describe type\n        for (const [name, set] of subtypes) {\n            const st = Array.from(set);\n            st.sort();\n            this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\"));\n        }\n    }\n    /**\n     *  Returnthe encoder for the specific %%type%%.\n     */\n    getEncoder(type) {\n        let encoder = this.#encoderCache.get(type);\n        if (!encoder) {\n            encoder = this.#getEncoder(type);\n            this.#encoderCache.set(type, encoder);\n        }\n        return encoder;\n    }\n    #getEncoder(type) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return encoder;\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            return (value) => {\n                assertArgument(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${parseInt(match[3])}`, \"value\", value);\n                let result = value.map(subEncoder);\n                if (this.#fullTypes.has(subtype)) {\n                    result = result.map(keccak256);\n                }\n                return keccak256(concat(result));\n            };\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this.#fullTypes.get(type));\n            return (value) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this.#fullTypes.has(type)) {\n                        return keccak256(result);\n                    }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return concat(values);\n            };\n        }\n        assertArgument(false, `unknown type: ${type}`, \"type\", type);\n    }\n    /**\n     *  Return the full type for %%name%%.\n     */\n    encodeType(name) {\n        const result = this.#fullTypes.get(name);\n        assertArgument(result, `unknown type: ${JSON.stringify(name)}`, \"name\", name);\n        return result;\n    }\n    /**\n     *  Return the encoded %%value%% for the %%type%%.\n     */\n    encodeData(type, value) {\n        return this.getEncoder(type)(value);\n    }\n    /**\n     *  Returns the hash of %%value%% for the type of %%name%%.\n     */\n    hashStruct(name, value) {\n        return keccak256(this.encodeData(name, value));\n    }\n    /**\n     *  Return the fulled encoded %%value%% for the [[types]].\n     */\n    encode(value) {\n        return this.encodeData(this.primaryType, value);\n    }\n    /**\n     *  Return the hash of the fully encoded %%value%% for the [[types]].\n     */\n    hash(value) {\n        return this.hashStruct(this.primaryType, value);\n    }\n    /**\n     *  @_ignore:\n     */\n    _visit(type, value, callback) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return callback(type, value);\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            assertArgument(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${parseInt(match[3])}`, \"value\", value);\n            return value.map((v) => this._visit(match[1], v, callback));\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, {});\n        }\n        assertArgument(false, `unknown type: ${type}`, \"type\", type);\n    }\n    /**\n     *  Call %%calback%% for each value in %%value%%, passing the type and\n     *  component within %%value%%.\n     *\n     *  This is useful for replacing addresses or other transformation that\n     *  may be desired on each component, based on its type.\n     */\n    visit(value, callback) {\n        return this._visit(this.primaryType, value, callback);\n    }\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     */\n    static from(types) {\n        return new TypedDataEncoder(types);\n    }\n    /**\n     *  Return the primary type for %%types%%.\n     */\n    static getPrimaryType(types) {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n    /**\n     *  Return the hashed struct for %%value%% using %%types%% and %%name%%.\n     */\n    static hashStruct(name, types, value) {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n    /**\n     *  Return the domain hash for %%domain%%.\n     */\n    static hashDomain(domain) {\n        const domainFields = [];\n        for (const name in domain) {\n            if (domain[name] == null) {\n                continue;\n            }\n            const type = domainFieldTypes[name];\n            assertArgument(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n            domainFields.push({ name, type });\n        }\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n    /**\n     *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */\n    static encode(domain, types, value) {\n        return concat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n    /**\n     *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */\n    static hash(domain, types, value) {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n    // Replaces all address types with ENS names with their looked up address\n    /**\n     * Resolves to the value from resolving all addresses in %%value%% for\n     * %%types%% and the %%domain%%.\n     */\n    static async resolveNames(domain, types, value, resolveName) {\n        // Make a copy to isolate it from the object passed in\n        domain = Object.assign({}, domain);\n        // Allow passing null to ignore value\n        for (const key in domain) {\n            if (domain[key] == null) {\n                delete domain[key];\n            }\n        }\n        // Look up all ENS names\n        const ensCache = {};\n        // Do we need to look up the domain's verifyingContract?\n        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n            ensCache[domain.verifyingContract] = \"0x\";\n        }\n        // We are going to use the encoder to visit all the base values\n        const encoder = TypedDataEncoder.from(types);\n        // Get a list of all the addresses\n        encoder.visit(value, (type, value) => {\n            if (type === \"address\" && !isHexString(value, 20)) {\n                ensCache[value] = \"0x\";\n            }\n            return value;\n        });\n        // Lookup each name\n        for (const name in ensCache) {\n            ensCache[name] = await resolveName(name);\n        }\n        // Replace the domain verifyingContract if needed\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n            domain.verifyingContract = ensCache[domain.verifyingContract];\n        }\n        // Replace all ENS names with their address\n        value = encoder.visit(value, (type, value) => {\n            if (type === \"address\" && ensCache[value]) {\n                return ensCache[value];\n            }\n            return value;\n        });\n        return { domain, value };\n    }\n    /**\n     *  Returns the JSON-encoded payload expected by nodes which implement\n     *  the JSON-RPC [[link-eip-712]] method.\n     */\n    static getPayload(domain, types, value) {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n        // Derive the EIP712Domain Struct reference type\n        const domainValues = {};\n        const domainTypes = [];\n        domainFieldNames.forEach((name) => {\n            const value = domain[name];\n            if (value == null) {\n                return;\n            }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n        const encoder = TypedDataEncoder.from(types);\n        const typesWithDomain = Object.assign({}, types);\n        assertArgument(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        typesWithDomain.EIP712Domain = domainTypes;\n        // Validate the data structures and types\n        encoder.encode(value);\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type, value) => {\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(getBytes(value));\n                }\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return getBigInt(value).toString();\n                }\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        assertArgument(typeof (value) === \"string\", \"invalid string\", \"value\", value);\n                        return value;\n                }\n                assertArgument(false, \"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n/**\n *  Compute the address used to sign the typed data for the %%signature%%.\n */\nexport function verifyTypedData(domain, types, value, signature) {\n    return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);\n}\n//# sourceMappingURL=typed-data.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}